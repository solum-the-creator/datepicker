"use strict";(self.webpackChunkdatepicker=self.webpackChunkdatepicker||[]).push([[735],{"./src/components/todo-calendar/todo-calendar.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BaseCalendarDefault:()=>BaseCalendarDefault,__namedExportsOrder:()=>__namedExportsOrder,default:()=>todo_calendar_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),calendar=__webpack_require__("./src/components/calendar/index.tsx");const CalendarWithTodoLogic=function withTodoLogic(WrappedComponent){return props=>{const{value,onSelect,...rest}=props,[todos,setTodos]=(0,react.useState)([]),[inputValue,setInputValue]=(0,react.useState)("");(0,react.useEffect)((()=>{const storedTodos=localStorage.getItem("todos");if(storedTodos){const parsedTodosWithDate=JSON.parse(storedTodos).map((todo=>({...todo,date:new Date(todo.date)})));setTodos(parsedTodosWithDate)}}),[]),(0,react.useEffect)((()=>{localStorage.setItem("todos",JSON.stringify(todos))}),[todos]);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(WrappedComponent,{...rest,value,onSelect}),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("input",{type:"text",value:inputValue,onChange:e=>setInputValue(e.target.value),placeholder:"Add a task"}),(0,jsx_runtime.jsx)("button",{type:"button",onClick:()=>((text,date)=>{const newTodo={id:String((new Date).getTime()),text,date};setTodos([...todos,newTodo]),setInputValue("")})(inputValue,value),children:"Add Task"}),(0,jsx_runtime.jsx)("ul",{children:todos.filter((todo=>todo.date.toDateString()===value?.toDateString())).map((todo=>(0,jsx_runtime.jsxs)("li",{children:[todo.text,(0,jsx_runtime.jsx)("button",{type:"button",onClick:()=>{return taskId=todo.id,void setTodos(todos.filter((todo=>todo.id!==taskId)));var taskId},children:"Remove"})]},todo.id)))})]})]})}}((0,__webpack_require__("./src/components/hoc/withCalendarLogic.tsx").l)(calendar.V)),TodoCalendar=()=>{const[date,setDate]=(0,react.useState)(new Date);return(0,jsx_runtime.jsx)(CalendarWithTodoLogic,{value:date,onSelect:setDate})};TodoCalendar.__docgenInfo={description:"",methods:[],displayName:"TodoCalendar"};const todo_calendar_stories={title:"Components/TodoCalendar",component:TodoCalendar},BaseCalendarDefault=(args=>(0,jsx_runtime.jsx)(TodoCalendar,{...args})).bind({});BaseCalendarDefault.args={startWeekOnSunday:!0,highlightWeekends:!0,highlightHolidays:!1};const __namedExportsOrder=["BaseCalendarDefault"];BaseCalendarDefault.parameters={...BaseCalendarDefault.parameters,docs:{...BaseCalendarDefault.parameters?.docs,source:{originalSource:"args => <TodoCalendar {...args} />",...BaseCalendarDefault.parameters?.docs?.source}}}},"./src/components/hoc/withCalendarLogic.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>withCalendarLogic});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),_utils_dateHelpers__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/utils/dateHelpers.ts");function withCalendarLogic(WrappedComponent){return props=>{const{value,onSelect,minDate,maxDate,...rest}=props,currentDate=value||new Date,[currentMonth,setCurrentMonth]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(currentDate.getMonth()),[currentYear,setCurrentYear]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(currentDate.getFullYear());(0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)((()=>{setCurrentMonth(currentDate.getMonth()),setCurrentYear(currentDate.getFullYear())}),[value]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(WrappedComponent,{...rest,selectedDate:value,currentMonth,currentYear,minDate,maxDate,onDateSelect:date=>{(0,_utils_dateHelpers__WEBPACK_IMPORTED_MODULE_2__.xR)(date,minDate,maxDate)&&onSelect?.(date)},onMonthChange:(newMonth,newYear)=>{setCurrentMonth(newMonth),setCurrentYear(newYear)}})}}}}]);