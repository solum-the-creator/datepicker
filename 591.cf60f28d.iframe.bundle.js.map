{"version":3,"file":"591.cf60f28d.iframe.bundle.js","mappings":";;;;;AASA;;;;;;AAQA;;;AAGA;;;;AAIA;;;;AAIA;;;AAKA;;;;;AAKA;;;;;;AAMA;;ACzBA;;;;;ACVA;AAGA;;;;;AAOA;;;;AAMA;;;;;;AAiBA;;AA8BA;;AAiBA;;;;;;;;;;;;;;;AA0BA;;;;AAIA;;;;AAIA;;;;;;;AC1FA;;;;;;;;;;;;;;ACdA;;AAWA;;;AAUA;;;;;;;ACtCA;;;;;;;ACcA;;;;;;;ACPA;;;ACJA;AACA;AACA;ACwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA","sources":["webpack://datepicker/./src/shared/components/calendar-header/calendar-header.styled.ts","webpack://datepicker/./src/shared/components/calendar-header/index.tsx","webpack://datepicker/./src/shared/components/calendar-views/calendar-days-view/calendar-days-view.styled.ts","webpack://datepicker/./src/shared/components/calendar-views/calendar-days-view/index.tsx","webpack://datepicker/./src/shared/components/calendar-views/calendar-views.styled.ts","webpack://datepicker/./src/shared/components/calendar-views/calendar-months-view/calendar-months-view.ts","webpack://datepicker/./src/shared/components/calendar-views/calendar-months-view/index.tsx","webpack://datepicker/./src/shared/components/calendar-views/calendar-years-view/year-cell/index.tsx","webpack://datepicker/./src/components/calendar/calendar.styled.ts","webpack://datepicker/./src/components/calendar/index.tsx","webpack://datepicker/./src/shared/styles/theme.ts"],"sourcesContent":["import { styled } from \"styled-components\";\n\nexport const HeaderContainer = styled.div`\n  padding: 5px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const MonthYearText = styled.div`\n  text-align: center;\n  font-weight: 700;\n\n  display: flex;\n  gap: 0.4rem;\n`;\n\nexport const ArrowButton = styled.button`\n  background-color: transparent;\n  border: none;\n  color: ${({ theme }) => theme.colors.primary};\n  cursor: pointer;\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.active};\n  }\n\n  &:disabled {\n    color: ${({ theme }) => theme.colors.border};\n    cursor: auto;\n  }\n`;\n\nexport const TextButton = styled.button`\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 700;\n\n  transition: color 0.2s ease;\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.active};\n  }\n`;\n","import { View } from \"@customTypes/calendar\";\nimport { getMonthName } from \"@utils/dateHelpers\";\nimport { getCalendarTitle } from \"@utils/formatDatesHelpers\";\nimport { canGoNext, canGoPrev } from \"@utils/validation\";\n\nimport { ArrowButton, HeaderContainer, MonthYearText, TextButton } from \"./calendar-header.styled\";\n\ntype CalendarHeaderProps = {\n  month: number;\n  year: number;\n  view: View;\n  minDate?: Date;\n  maxDate?: Date;\n  onPrevClick: () => void;\n  onNextClick: () => void;\n  onMonthClick: () => void;\n  onYearClick: () => void;\n};\n\nexport const CalendarHeader: React.FC<CalendarHeaderProps> = ({\n  month,\n  year,\n  view,\n  minDate,\n  maxDate,\n  onPrevClick,\n  onNextClick,\n  onMonthClick,\n  onYearClick,\n}) => {\n  const title = getCalendarTitle(view, year);\n\n  const isCanGoPrev = canGoPrev(view, year, month, minDate);\n  const isCanGoNext = canGoNext(view, year, month, maxDate);\n\n  const handlePrevClick = () => {\n    if (isCanGoPrev) {\n      onPrevClick();\n    }\n  };\n\n  const handleNextClick = () => {\n    if (isCanGoNext) {\n      onNextClick();\n    }\n  };\n\n  return (\n    <HeaderContainer>\n      <ArrowButton onClick={handlePrevClick} disabled={!isCanGoPrev} data-testid=\"prev-button\">\n        {\"<<\"}\n      </ArrowButton>\n      <MonthYearText>\n        {view === \"days\" ? (\n          <>\n            <TextButton onClick={onMonthClick}>{getMonthName(month)}</TextButton>\n            <TextButton onClick={onYearClick}>{year}</TextButton>\n          </>\n        ) : (\n          <TextButton onClick={onYearClick}>{title}</TextButton>\n        )}\n      </MonthYearText>\n      <ArrowButton onClick={handleNextClick} disabled={!isCanGoNext} data-testid=\"next-button\">\n        {\">>\"}\n      </ArrowButton>\n    </HeaderContainer>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const CalendarBodyContainer = styled.div``;\n\nexport const WeekDaysHeader = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: 32px;\n\n  color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const WeekDayCell = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n`;\n\nexport const DatesGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-auto-rows: 32px;\n`;\n\nexport const DayCell = styled.button<{\n  $isCurrentMonth?: boolean;\n  $isToday?: boolean;\n  $isWeekend?: boolean;\n  $isHoliday?: boolean;\n  $isDisabled?: boolean;\n  $isSelected?: boolean;\n  $isInRange?: boolean;\n  $isRangeStart?: boolean;\n  $isRangeEnd?: boolean;\n  $hasTask?: boolean;\n}>`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  color: ${({\n    theme,\n    $isCurrentMonth,\n    $isWeekend,\n    $isHoliday,\n    $isSelected,\n    $isDisabled,\n    $isInRange,\n    $isRangeStart,\n    $isRangeEnd,\n  }) => {\n    switch (true) {\n      case $isDisabled:\n        return theme.colors.disabledText;\n      case $isSelected || $isRangeStart || $isRangeEnd:\n        return theme.colors.activeText;\n      case $isInRange:\n        return theme.colors.active;\n      case $isCurrentMonth && $isWeekend:\n        return theme.colors.red;\n      case $isCurrentMonth && $isHoliday:\n        return theme.colors.red;\n\n      case !$isCurrentMonth:\n        return theme.colors.disabledText;\n      default:\n        return theme.colors.secondary;\n    }\n  }};\n\n  background-color: ${({ theme, $isToday, $isSelected, $isInRange, $isRangeStart, $isRangeEnd }) => {\n    switch (true) {\n      case $isSelected || $isRangeEnd:\n        return theme.colors.active;\n      case $isRangeStart:\n        return theme.colors.activeBright;\n      case $isRangeEnd:\n        return theme.colors.activeBright;\n      case $isInRange:\n        return theme.colors.range;\n      case $isToday:\n        return theme.colors.hoverBackground;\n      default:\n        return \"transparent\";\n    }\n  }};\n  border: none;\n  border-radius: ${({ theme, $isRangeStart, $isRangeEnd, $isInRange }) => {\n    switch (true) {\n      case $isRangeStart:\n        return theme.bordersRadius.rangeStart;\n      case $isRangeEnd:\n        return theme.bordersRadius.rangeEnd;\n      case $isInRange:\n        return theme.bordersRadius.range;\n      default:\n        return \"0.5rem\";\n    }\n  }};\n\n  font-size: 13px;\n  font-weight: 600;\n  cursor: pointer;\n\n  transition: background-color 0.2s ease-in-out;\n\n  &::before {\n    content: \"\";\n    display: block;\n    width: 0.25rem;\n    height: 0.25rem;\n    border-radius: 0.5rem;\n    position: absolute;\n    background-color: ${({ theme }) => theme.colors.active};\n    bottom: 0.2rem;\n    left: calc(50% - 0.125rem);\n    z-index: 0;\n    opacity: ${({ $hasTask }) => ($hasTask ? \"0.5\" : \"0\")};\n  }\n\n  &:hover {\n    background-color: ${({ theme, $isSelected, $isRangeStart, $isRangeEnd }) =>\n      !$isSelected && !$isRangeStart && !$isRangeEnd && theme.colors.hoverBackground};\n  }\n\n  &:disabled {\n    cursor: auto;\n    background-color: transparent;\n  }\n`;\n","import { useCallback, useMemo } from \"react\";\nimport { Todo } from \"@customTypes/todo\";\n\nimport { defaultHolidays } from \"@/shared/constants/holidays\";\nimport { useDayProps } from \"@/shared/hooks/useDayProps\";\nimport { Holiday } from \"@/shared/types/holidays\";\nimport { enhanceCalendarDays, getCalendarDays, getWeekDaysNames } from \"@/shared/utils/dateHelpers\";\n\nimport {\n  CalendarBodyContainer,\n  DatesGrid,\n  DayCell,\n  WeekDayCell,\n  WeekDaysHeader,\n} from \"./calendar-days-view.styled\";\n\ntype CalendarDaysViewProps = {\n  month: number;\n  year: number;\n  selectedDate?: Date;\n  rangeStart?: Date;\n  rangeEnd?: Date;\n  startWeekOnSunday?: boolean;\n  highlightWeekends?: boolean;\n  highlightHolidays?: boolean;\n  holidays?: Holiday[];\n  withTodos?: boolean;\n  todos?: Todo[];\n  onDateSelect?: (date: Date) => void;\n  minDate?: Date;\n  maxDate?: Date;\n};\n\nexport const CalendarDaysView: React.FC<CalendarDaysViewProps> = ({\n  month,\n  year,\n  selectedDate,\n  rangeStart,\n  rangeEnd,\n  onDateSelect,\n  minDate,\n  maxDate,\n  todos = [],\n  withTodos = false,\n  startWeekOnSunday = true,\n  highlightWeekends = false,\n  highlightHolidays = false,\n  holidays = defaultHolidays,\n}) => {\n  const weekDays = useMemo(() => getWeekDaysNames(startWeekOnSunday), [startWeekOnSunday]);\n\n  const days = useMemo(\n    () => getCalendarDays(year, month, startWeekOnSunday),\n    [year, month, startWeekOnSunday]\n  );\n\n  const enhancedDays = useMemo(\n    () => enhanceCalendarDays(days, startWeekOnSunday, minDate, maxDate, holidays),\n    [days, startWeekOnSunday, minDate, maxDate, holidays]\n  );\n\n  const getDayProps = useDayProps({\n    selectedDate,\n    rangeStart,\n    rangeEnd,\n    withTodos,\n    todos,\n    highlightWeekends,\n    highlightHolidays,\n  });\n\n  const handleDateClick = useCallback(\n    (day: number, month: number, year: number) => {\n      const newSelectedDate = new Date(year, month, day);\n\n      if (onDateSelect) {\n        onDateSelect(newSelectedDate);\n      }\n    },\n    [onDateSelect]\n  );\n\n  return (\n    <CalendarBodyContainer>\n      <WeekDaysHeader>\n        {weekDays.map((day) => (\n          <WeekDayCell key={day}>{day}</WeekDayCell>\n        ))}\n      </WeekDaysHeader>\n\n      <DatesGrid>\n        {enhancedDays.map((dayInfo) => {\n          return (\n            <DayCell\n              key={`${dayInfo.year}-${dayInfo.month}-${dayInfo.day}`}\n              data-day={dayInfo.day}\n              data-month={dayInfo.month}\n              data-year={dayInfo.year}\n              onClick={() => handleDateClick(dayInfo.day, dayInfo.month, dayInfo.year)}\n              {...getDayProps(dayInfo)}>\n              {dayInfo.day}\n            </DayCell>\n          );\n        })}\n      </DatesGrid>\n    </CalendarBodyContainer>\n  );\n};\n","import { styled } from \"styled-components\";\n\nexport const CalendarCell = styled.button<{\n  $isSelected?: boolean;\n  $isDisabled?: boolean;\n}>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  border: none;\n  border-radius: 8px;\n\n  font-size: 13px;\n  font-weight: 600;\n  cursor: pointer;\n\n  transition: background-color 0.2s ease-in-out;\n\n  color: ${({ theme, $isSelected, $isDisabled }) => {\n    switch (true) {\n      case $isDisabled:\n        return theme.colors.disabledText;\n      case $isSelected:\n        return theme.colors.activeText;\n      default:\n        return theme.colors.secondary;\n    }\n  }};\n\n  background-color: ${({ theme, $isSelected }) => {\n    switch (true) {\n      case $isSelected:\n        return theme.colors.active;\n      default:\n        return \"transparent\";\n    }\n  }};\n\n  &:hover {\n    background-color: ${({ theme, $isSelected }) => !$isSelected && theme.colors.hoverBackground};\n  }\n\n  &:disabled {\n    cursor: auto;\n    background-color: transparent;\n  }\n`;\n","import { styled } from \"styled-components\";\n\nexport const CalendarBodyContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-auto-rows: 32px;\n\n  row-gap: 1rem;\n  column-gap: 0.5rem;\n`;\n","import { isMonthDisabled } from \"@utils/validation\";\n\nimport { shortMonths } from \"@/shared/constants/months\";\n\nimport { CalendarCell } from \"../calendar-views.styled\";\n\nimport { CalendarBodyContainer } from \"./calendar-months-view\";\n\ntype CalendarMonthsViewProps = {\n  currentMonth: number;\n  currentYear: number;\n  onMonthSelect: (month: number) => void;\n  minDate?: Date;\n  maxDate?: Date;\n};\n\nexport const CalendarMonthsView: React.FC<CalendarMonthsViewProps> = ({\n  currentMonth,\n  currentYear,\n  onMonthSelect,\n  minDate,\n  maxDate,\n}) => {\n  const handleMonthClick = (month: number, isDisabled: boolean) => {\n    if (!isDisabled) {\n      onMonthSelect(month);\n    }\n  };\n\n  return (\n    <CalendarBodyContainer>\n      {shortMonths.map((month, index) => {\n        const isDisabled = isMonthDisabled(index, currentYear, minDate, maxDate);\n        return (\n          <CalendarCell\n            key={month}\n            onClick={() => handleMonthClick(index, isDisabled)}\n            $isDisabled={isDisabled}\n            $isSelected={currentMonth === index}>\n            {month}\n          </CalendarCell>\n        );\n      })}\n    </CalendarBodyContainer>\n  );\n};\n","import { CalendarCell } from \"../../calendar-views.styled\";\n\ntype YearCellProps = {\n  year: number;\n  isSelected: boolean;\n  isDisabled: boolean;\n  onYearSelect: (year: number) => void;\n};\n\nexport const YearCell: React.FC<YearCellProps> = ({ year, isSelected, isDisabled, onYearSelect }) => {\n  const handleClick = () => {\n    if (!isDisabled) {\n      onYearSelect(year);\n    }\n  };\n  return (\n    <CalendarCell onClick={handleClick} $isSelected={isSelected} $isDisabled={isDisabled}>\n      {year}\n    </CalendarCell>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const CalendarContainer = styled.div<{ $withTodo?: boolean }>`\n  padding: 10px;\n  width: 250px;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: ${({ $withTodo }) => ($withTodo ? \"0.5rem 0.5rem 0 0\" : \"0.5rem\")};\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n","import { useState } from \"react\";\nimport { View } from \"@customTypes/calendar\";\nimport { Todo } from \"@customTypes/todo\";\n\nimport { CalendarHeader } from \"@/shared/components/calendar-header\";\nimport { CalendarDaysView } from \"@/shared/components/calendar-views/calendar-days-view\";\nimport { CalendarMonthsView } from \"@/shared/components/calendar-views/calendar-months-view\";\nimport { CalendarYearsView } from \"@/shared/components/calendar-views/calendar-years-view\";\nimport { useCalendarDate } from \"@/shared/hooks/useCalendarDate\";\nimport { Holiday } from \"@/shared/types/holidays\";\nimport { calculateNewMonth, calculateNewYear, isDateWithinRange } from \"@/shared/utils/dateHelpers\";\n\nimport { CalendarContainer } from \"./calendar.styled\";\n\ntype CalendarProps = {\n  value?: Date;\n  rangeStart?: Date;\n  rangeEnd?: Date;\n  minDate?: Date;\n  maxDate?: Date;\n  isRange?: boolean;\n  withTodo?: boolean;\n  todos?: Todo[];\n  holidays?: Holiday[];\n  startWeekOnSunday?: boolean;\n  highlightWeekends?: boolean;\n  highlightHolidays?: boolean;\n  onDateSelect?: (date?: Date) => void;\n  onRangeSelect?: (start?: Date, end?: Date) => void;\n};\n\nexport const Calendar: React.FC<CalendarProps> = ({\n  value,\n  rangeStart,\n  rangeEnd,\n  minDate,\n  maxDate,\n  holidays,\n  onDateSelect,\n  onRangeSelect,\n  todos,\n  withTodo = false,\n  isRange = false,\n  highlightHolidays = false,\n  highlightWeekends = false,\n  startWeekOnSunday = true,\n}) => {\n  const [view, setView] = useState<View>(\"days\");\n\n  const { currentMonth, currentYear, handleMonthYearChange } = useCalendarDate(value, rangeStart, rangeEnd);\n\n  const handleMonthClick = () => {\n    setView(\"months\");\n  };\n\n  const handleYearClick = () => {\n    setView(\"years\");\n  };\n\n  const changeMonthYear = (step: number) => {\n    switch (view) {\n      case \"days\": {\n        const newMonth = calculateNewMonth(currentMonth, step);\n        const newYear = calculateNewYear(currentMonth, step, newMonth, currentYear);\n        handleMonthYearChange(newMonth, newYear);\n        break;\n      }\n      case \"months\": {\n        handleMonthYearChange(currentMonth, currentYear + step);\n        break;\n      }\n      case \"years\": {\n        handleMonthYearChange(currentMonth, currentYear + step * 12);\n        break;\n      }\n      default:\n        break;\n    }\n  };\n\n  const handlePrevClick = () => changeMonthYear(-1);\n\n  const handleNextClick = () => changeMonthYear(1);\n\n  const handleMonthSelect = (month: number) => {\n    setView(\"days\");\n    handleMonthYearChange(month, currentYear);\n  };\n\n  const handleYearSelect = (year: number) => {\n    setView(\"months\");\n    handleMonthYearChange(currentMonth, year);\n  };\n\n  const handleSingleDateSelect = (date: Date) => {\n    if (onDateSelect) {\n      onDateSelect(date);\n    }\n  };\n\n  const handleRangeDateSelect = (date: Date) => {\n    if (!onRangeSelect) {\n      return;\n    }\n\n    onRangeSelect(date, date);\n  };\n\n  const handleDateSelect = (date: Date) => {\n    if (!isDateWithinRange(date, minDate, maxDate)) return;\n\n    if (isRange) {\n      handleRangeDateSelect(date);\n    } else {\n      handleSingleDateSelect(date);\n    }\n  };\n\n  return (\n    <CalendarContainer $withTodo={withTodo}>\n      <CalendarHeader\n        month={currentMonth}\n        year={currentYear}\n        view={view}\n        minDate={minDate}\n        maxDate={maxDate}\n        onPrevClick={handlePrevClick}\n        onNextClick={handleNextClick}\n        onMonthClick={handleMonthClick}\n        onYearClick={handleYearClick}\n      />\n\n      {view === \"days\" && (\n        <CalendarDaysView\n          month={currentMonth}\n          year={currentYear}\n          minDate={minDate}\n          maxDate={maxDate}\n          startWeekOnSunday={startWeekOnSunday}\n          highlightWeekends={highlightWeekends}\n          highlightHolidays={highlightHolidays}\n          holidays={holidays}\n          withTodos={withTodo}\n          todos={todos}\n          selectedDate={isRange ? undefined : value}\n          rangeStart={isRange ? rangeStart : undefined}\n          rangeEnd={isRange ? rangeEnd : undefined}\n          onDateSelect={handleDateSelect}\n        />\n      )}\n\n      {view === \"months\" && (\n        <CalendarMonthsView\n          currentMonth={currentMonth}\n          currentYear={currentYear}\n          onMonthSelect={handleMonthSelect}\n          minDate={minDate}\n          maxDate={maxDate}\n        />\n      )}\n\n      {view === \"years\" && (\n        <CalendarYearsView\n          currentYear={currentYear}\n          onYearSelect={handleYearSelect}\n          minDate={minDate}\n          maxDate={maxDate}\n        />\n      )}\n    </CalendarContainer>\n  );\n};\n","export type Theme = {\n  colors: {\n    primary?: string;\n    secondary?: string;\n    background?: string;\n    disabledText?: string;\n    activeText?: string;\n    active?: string;\n    activeBright?: string;\n    range?: string;\n    border?: string;\n    hoverBackground?: string;\n    hoverButton?: string;\n    muted?: string;\n    red?: string;\n  };\n  bordersRadius: {\n    rangeStart?: string;\n    rangeEnd?: string;\n    range?: string;\n  };\n};\n\nexport const theme: Theme = {\n  colors: {\n    primary: \"#000000\",\n    secondary: \"#333333\",\n    background: \"#ffffff\",\n    disabledText: \"#aaaaaa\",\n    activeText: \"#ffffff\",\n    active: \"#2f80ed\",\n    activeBright: \"#82B3F4\",\n    range: \"#eaf2fd\",\n    border: \"#e1e1e1\",\n    hoverBackground: \"#2f80ed1a\",\n    hoverButton: \"#65a7ff\",\n    muted: \"#f1f1f1\",\n    red: \"#ff1818\",\n  },\n  bordersRadius: {\n    rangeStart: \"0.5rem 0 0 0.5rem\",\n    rangeEnd: \"0 0.5rem 0.5rem 0\",\n    range: \"0\",\n  },\n};\n"],"names":[],"sourceRoot":""}