{"version":3,"file":"components-todo-calendar-todo-calendar-stories.dca4434e.iframe.bundle.js","mappings":";;;AAKA;AACA;;ACGA;;;;;;;;;;;ACAA;;;;;;;;;;;ACMA;;;;;;;AAOA;;;;AAMA;;;AAGA;AAGA;;;;AAMA;;;;AAIA;AACA;;;;;;AAMA;;AAIA;;;;AAIA;AACA;;;;;;AAMA;;AC/CA;;;;;;;ACVA;AACA;AAGA;;;;;;AAQA;;ACTA;;;;;;;;;;;;;;;ACKA;;;;AAIA;;ACXA;;;;;;;ACDA;;;;AAMA;;AAEA;AAGA;;;;AAMA;;;AAGA;;AAIA;;;;;;AAMA;AACA;;;;;;AAMA;;;;AAIA;;;AAKA;;;;AAMA;;;;AAIA;AACA;;;;;;AAMA;;AAIA;;;;;;;;;AC/CA","sources":["webpack://datepicker/./src/shared/components/calendar-button/calendar-button.styled.ts","webpack://datepicker/./src/shared/components/calendar-button/index.tsx","webpack://datepicker/./src/shared/components/modal-container/index.tsx","webpack://datepicker/./src/shared/components/confirm-modal/confirm-modal.styled.ts","webpack://datepicker/./src/shared/components/confirm-modal/index.tsx","webpack://datepicker/./src/shared/components/todo-modal/todo-list/todo-item/todo-item.styled.ts","webpack://datepicker/./src/shared/components/todo-modal/todo-list/todo-item/index.tsx","webpack://datepicker/./src/shared/components/todo-modal/todo-list/todo-list.styled.ts","webpack://datepicker/./src/shared/components/todo-modal/todo-list/index.tsx","webpack://datepicker/./src/shared/components/todo-modal/todo-modal.styled.ts","webpack://datepicker/./src/shared/components/todo-modal/index.tsx"],"sourcesContent":["import { styled } from \"styled-components\";\n\nexport const CalendarButtonStyled = styled.button`\n  width: 250px;\n  padding: 0.6rem;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 0 0 0.5rem 0.5rem;\n`;\n","import { ThemeWrapper } from \"@/shared/components/theme-wrapper\";\n\nimport { CalendarButtonStyled } from \"./calendar-button.styled\";\n\ntype CalendarButtonProps = {\n  children?: React.ReactNode;\n  onClick?: () => void;\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const CalendarButton: React.FC<CalendarButtonProps> = ({ children, onClick }) => {\n  return (\n    <ThemeWrapper>\n      <CalendarButtonStyled type=\"button\" onClick={onClick}>\n        {children}\n      </CalendarButtonStyled>\n    </ThemeWrapper>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { StyledModalContainer } from \"./modal-container.styled\";\n\ntype ModalContainerProps = {\n  children: React.ReactNode;\n};\n\nexport const ModalContainer: React.FC<ModalContainerProps> = ({ children }) => {\n  const [modalContainer] = useState(() => document.createElement(\"div\"));\n\n  useEffect(() => {\n    document.body.appendChild(modalContainer);\n\n    return () => {\n      document.body.removeChild(modalContainer);\n    };\n  }, [modalContainer]);\n\n  return createPortal(<StyledModalContainer>{children}</StyledModalContainer>, modalContainer);\n};\n","import { styled } from \"styled-components\";\n\nexport const ConfirmModalContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  padding: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.4);\n`;\n\nexport const ConfirmModalContent = styled.div`\n  width: 100%;\n  max-width: 20rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n\n  background-color: ${({ theme }) => theme.colors.background};\n\n  padding: 2rem 1rem;\n  border-radius: 0.5rem;\n`;\n\nexport const ConfrirmTitle = styled.h2`\n  font-size: 1rem;\n  text-align: center;\n  color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n`;\n\nexport const ConfirmButton = styled.button`\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 0.5rem;\n  background-color: ${({ theme }) => theme.colors.hoverBackground};\n  color: ${({ theme }) => theme.colors.secondary};\n  cursor: pointer;\n\n  transition: background-color 0.2s ease;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.activeBright};\n  }\n`;\n\nexport const CancelButton = styled.button`\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 0.5rem;\n  background-color: ${({ theme }) => theme.colors.muted};\n  color: ${({ theme }) => theme.colors.secondary};\n  cursor: pointer;\n\n  transition: background-color 0.2s ease;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.activeBright};\n  }\n`;\n","import { useRef } from \"react\";\n\nimport { useClickOutside } from \"@/shared/hooks/useClickOutside\";\n\nimport {\n  ButtonsContainer,\n  CancelButton,\n  ConfirmButton,\n  ConfirmModalContainer,\n  ConfirmModalContent,\n  ConfrirmTitle,\n} from \"./confirm-modal.styled\";\n\ntype ConfirmModalProps = {\n  title?: string;\n  onCancel: () => void;\n  onConfirm: () => void;\n};\n\nexport const ConfirmModal: React.FC<ConfirmModalProps> = ({ title, onCancel, onConfirm }) => {\n  const confirmRef = useRef<HTMLDivElement>(null);\n  useClickOutside(confirmRef, onCancel);\n\n  return (\n    <ConfirmModalContainer>\n      <ConfirmModalContent ref={confirmRef}>\n        <ConfrirmTitle>{title}</ConfrirmTitle>\n        <ButtonsContainer>\n          <ConfirmButton type=\"button\" onClick={onConfirm}>\n            Yes\n          </ConfirmButton>\n          <CancelButton type=\"button\" onClick={onCancel}>\n            Cancel\n          </CancelButton>\n        </ButtonsContainer>\n      </ConfirmModalContent>\n    </ConfirmModalContainer>\n  );\n};\n","import { styled } from \"styled-components\";\n\nexport const TodoItemStyled = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n  padding: 0.5rem;\n  border-radius: 0.5rem;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n\nexport const TodoText = styled.p``;\n\nexport const RemoveButton = styled.button`\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.red};\n  }\n`;\n","import { useState } from \"react\";\n\nimport { ConfirmModal } from \"@/shared/components/confirm-modal\";\n\nimport { RemoveButton, TodoItemStyled, TodoText } from \"./todo-item.styled\";\n\ntype TodoItemProps = {\n  id: string;\n  text: string;\n  onTodoRemove: (todoId: string) => void;\n};\n\nexport const TodoItem: React.FC<TodoItemProps> = ({ id, text, onTodoRemove }) => {\n  const [isDelete, setIsDelete] = useState(false);\n\n  const handleDeleteClick = () => {\n    setIsDelete(true);\n  };\n\n  const handleConfirmRemove = () => {\n    onTodoRemove(id);\n  };\n\n  const handleCancelRemove = () => {\n    setIsDelete(false);\n  };\n\n  return (\n    <TodoItemStyled>\n      <TodoText>{text}</TodoText>\n      <RemoveButton onClick={handleDeleteClick}>Remove</RemoveButton>\n\n      {isDelete && (\n        <ConfirmModal\n          title=\"Do you want to delete this task?\"\n          onConfirm={handleConfirmRemove}\n          onCancel={handleCancelRemove}\n        />\n      )}\n    </TodoItemStyled>\n  );\n};\n","import { styled } from \"styled-components\";\n\nexport const TodoListStyled = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n\n  height: 10rem;\n  overflow: auto;\n\n  padding-right: 0.5rem;\n\n  &::-webkit-scrollbar {\n    width: 0.25rem;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: ${({ theme }) => theme.colors.border};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: ${({ theme }) => theme.colors.disabledText};\n  }\n`;\n","import { Todo } from \"@/shared/types/todo\";\n\nimport { TodoItem } from \"./todo-item\";\nimport { TodoListStyled } from \"./todo-list.styled\";\n\ntype TodoListProps = {\n  todos: Todo[];\n  onTodoRemove: (todoId: string) => void;\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos, onTodoRemove }) => {\n  return (\n    <TodoListStyled>\n      {todos.map((todo) => (\n        <TodoItem key={todo.id} id={todo.id} text={todo.text} onTodoRemove={onTodoRemove} />\n      ))}\n    </TodoListStyled>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const TodoModalContent = styled.div`\n  width: 100%;\n  max-width: 30rem;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n\n  background-color: ${({ theme }) => theme.colors.background};\n\n  padding: 2rem 1rem;\n  border-radius: 0.5rem;\n`;\n\nexport const ModalTitle = styled.h2`\n  text-align: center;\n  color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const TodoInputContainer = styled.div`\n  width: 100%;\n  display: flex;\n  gap: 0.2rem;\n`;\n\nexport const TodoInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 0.5rem;\n`;\n\nexport const AddButton = styled.button`\n  border: none;\n  width: 6rem;\n  border-radius: 0.5rem;\n  padding: 0.5rem;\n\n  color: ${({ theme }) => theme.colors.primary};\n  background-color: ${({ theme }) => theme.colors.active};\n  cursor: pointer;\n\n  transition: background-color 0.2s ease;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.hoverButton};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.colors.muted};\n    cursor: auto;\n  }\n`;\n\nexport const CloseButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 0.5rem;\n`;\n\nexport const CloseButton = styled.button`\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 0.5rem;\n  background-color: ${({ theme }) => theme.colors.hoverBackground};\n  color: ${({ theme }) => theme.colors.secondary};\n  cursor: pointer;\n\n  transition: background-color 0.2s ease;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.activeBright};\n  }\n`;\n\nexport const EmptyTodosList = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 10rem;\n\n  font-size: 1rem;\n  font-weight: 500;\n`;\n","import { useRef, useState } from \"react\";\n\nimport { ThemeWrapper } from \"@/shared/components/theme-wrapper\";\nimport { useClickOutside } from \"@/shared/hooks/useClickOutside\";\nimport { Todo } from \"@/shared/types/todo\";\n\nimport { ModalContainer } from \"../modal-container\";\n\nimport { TodoList } from \"./todo-list\";\nimport {\n  AddButton,\n  CloseButton,\n  CloseButtonContainer,\n  EmptyTodosList,\n  ModalTitle,\n  TodoInput,\n  TodoInputContainer,\n  TodoModalContent,\n} from \"./todo-modal.styled\";\n\ntype TodoModalProps = {\n  isOpen: boolean;\n  date?: Date;\n  todos: Todo[];\n  onClose: () => void;\n  onTodoAdd: (text: string, date?: Date) => void;\n  onTodoRemove: (taskId: string) => void;\n};\n\nexport const TodoModal: React.FC<TodoModalProps> = ({\n  isOpen,\n  date,\n  todos,\n  onClose,\n  onTodoAdd,\n  onTodoRemove,\n}) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const ref = useRef<HTMLDivElement>(null);\n  useClickOutside(ref, onClose);\n\n  const maxLength = 50;\n\n  const handleTodoAdd = (text: string, date?: Date) => {\n    if (text.length <= maxLength) {\n      onTodoAdd(text, date);\n      setInputValue(\"\");\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value.length <= maxLength) {\n      setInputValue(e.target.value);\n    }\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <ThemeWrapper>\n      <ModalContainer>\n        <TodoModalContent ref={ref}>\n          <ModalTitle>Tasks for {date?.toLocaleDateString()}</ModalTitle>\n\n          <TodoInputContainer>\n            <TodoInput\n              type=\"text\"\n              maxLength={maxLength}\n              placeholder=\"Add a new task\"\n              value={inputValue}\n              onChange={handleInputChange}\n            />\n            <AddButton onClick={() => handleTodoAdd(inputValue, date)} disabled={!inputValue}>\n              Add task\n            </AddButton>\n          </TodoInputContainer>\n\n          {todos.length === 0 ? (\n            <EmptyTodosList>Your task list is empty</EmptyTodosList>\n          ) : (\n            <TodoList todos={todos} onTodoRemove={onTodoRemove} />\n          )}\n\n          <CloseButtonContainer>\n            <CloseButton onClick={onClose}>Close</CloseButton>\n          </CloseButtonContainer>\n        </TodoModalContent>\n      </ModalContainer>\n    </ThemeWrapper>\n  );\n};\n"],"names":[],"sourceRoot":""}