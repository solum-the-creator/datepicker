{"version":3,"file":"components-range-calendar-range-calendar-stories.ea0fa77e.iframe.bundle.js","mappings":";;;AAMA;;;;ACEA;;;;;;;;;;;;AAYA;;;AAGA;;AAIA;;;;;;AAMA;;;;;AAOA;AACA;AAGA;;;;AAMA;;;;;;ACjCA;;ACXA;;ACaA","sources":["webpack://datepicker/./src/components/range-calendar/index.tsx","webpack://datepicker/./src/shared/components/date-input/date-input.styled.ts","webpack://datepicker/./src/shared/components/date-input/index.tsx","webpack://datepicker/./src/shared/components/date-picker-with-calendar/date-picker-with-calendar.ts","webpack://datepicker/./src/shared/components/date-picker-with-calendar/index.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Calendar } from \"@components/calendar\";\nimport { Holiday } from \"@customTypes/holidays\";\n\nimport { withRangeLogic } from \"@/shared/hoc/with-range-logic/withRangeLogic\";\n\nconst CalendarWithRangeLogic = withRangeLogic(Calendar);\n\ntype RangeCalendarProps = {\n  minDate?: Date;\n  maxDate?: Date;\n  labelStart?: string;\n  labelEnd?: string;\n  startWeekOnSunday?: boolean;\n  highlightWeekends?: boolean;\n  highlightHolidays?: boolean;\n  holidays?: Holiday[];\n};\n\nexport const RangeCalendar: React.FC<RangeCalendarProps> = ({ ...props }) => {\n  const [rangeStart, setRangeStart] = useState<Date>();\n  const [rangeEnd, setRangeEnd] = useState<Date>();\n\n  return (\n    <CalendarWithRangeLogic\n      rangeStart={rangeStart}\n      rangeEnd={rangeEnd}\n      onRangeSelect={(start, end) => [setRangeStart(start), setRangeEnd(end)]}\n      {...props}\n    />\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n`;\n\nexport const InputContainer = styled.div<{ $isError?: boolean }>`\n  width: 100%;\n  max-width: 250px;\n  display: flex;\n  align-items: center;\n\n  gap: 0.5rem;\n\n  border: 1px solid;\n  border-radius: 0.5rem;\n  padding: 0.8rem 1rem;\n\n  border-color: ${({ theme, $isError }) => ($isError ? theme.colors.red : theme.colors.border)};\n\n  &:focus-within {\n    border: 1px solid ${({ $isError, theme }) => ($isError ? theme.colors.red : theme.colors.primary)};\n  }\n`;\n\nexport const Input = styled.input<{ $isError?: boolean }>`\n  width: 100%;\n  font-size: 1rem;\n  border: none;\n\n  font-size: 15px;\n  color: ${({ theme }) => theme.colors.secondary};\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const Label = styled.label`\n  color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const ClearButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const IconContainer = styled.div`\n  width: 1rem;\n  height: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { CalendarIcon } from \"@/shared/components/icons/calendar-icon\";\nimport { CloseIcon } from \"@/shared/components/icons/close-icon\";\nimport { ThemeWrapper } from \"@/shared/components/theme-wrapper\";\nimport { formatDateInputValue } from \"@/shared/utils/formatDatesHelpers\";\n\nimport { ClearButton, Container, IconContainer, Input, InputContainer, Label } from \"./date-input.styled\";\n\ntype DateInputProps = {\n  value: string;\n  label?: string;\n  placeholder?: string;\n  isError?: boolean;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onFocus?: () => void;\n  onClear?: () => void;\n};\n\nexport const DateInput: React.FC<DateInputProps> = ({\n  value,\n  label,\n  placeholder,\n  isError,\n  onChange,\n  onFocus,\n  onClear,\n}) => {\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formattedValue = formatDateInputValue(e.target.value);\n    onChange?.({ ...e, target: { ...e.target, value: formattedValue } });\n  };\n\n  const handleInputFocus = () => {\n    onFocus?.();\n  };\n\n  const handleClear = () => {\n    onClear?.();\n  };\n\n  return (\n    <ThemeWrapper>\n      <Container>\n        {label && <Label>{label}</Label>}\n        <InputContainer $isError={isError}>\n          <IconContainer>\n            <CalendarIcon />\n          </IconContainer>\n          <Input\n            type=\"text\"\n            placeholder={placeholder}\n            autoComplete=\"off\"\n            onChange={handleInputChange}\n            onFocus={handleInputFocus}\n            value={value}\n          />\n          {value && (\n            <ClearButton onClick={handleClear}>\n              <CloseIcon />\n            </ClearButton>\n          )}\n        </InputContainer>\n      </Container>\n    </ThemeWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const PickerContainer = styled.div`\n  position: relative;\n`;\n\nexport const CalendarContainer = styled.div`\n  position: absolute;\n`;\n","import { useEffect, useRef, useState } from \"react\";\nimport { isDateWithinRange, isValidDateParts } from \"@utils/dateHelpers\";\nimport { formatDate, parseDate } from \"@utils/formatDatesHelpers\";\n\nimport { DateInput } from \"@/shared/components/date-input\";\nimport { useClickOutside } from \"@/shared/hooks/useClickOutside\";\n\nimport { CalendarContainer, PickerContainer } from \"./date-picker-with-calendar\";\n\ntype DatePickerWithCalendarProps = {\n  value?: Date;\n  label?: string;\n  onDateSelect?: (date?: Date) => void;\n  placeholder?: string;\n  minDate?: Date;\n  maxDate?: Date;\n  children: (handleDateSelect: (date?: Date) => void) => React.ReactNode;\n};\n\nexport const DatePickerWithCalendar: React.FC<DatePickerWithCalendarProps> = ({\n  value,\n  label,\n  children,\n  onDateSelect,\n  minDate,\n  maxDate,\n  placeholder,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [inputValue, setInputValue] = useState(value ? formatDate(value) : \"\");\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setInputValue(value ? formatDate(value) : \"\");\n  }, [value]);\n\n  const handleClickOutside = () => {\n    setIsCalendarOpen(false);\n  };\n\n  useClickOutside(ref, handleClickOutside);\n\n  const handleDateSelect = (date?: Date) => {\n    setInputValue(date ? formatDate(date) : \"\");\n    setIsCalendarOpen(false);\n    onDateSelect?.(date);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const input = e.target.value;\n    setInputValue(input);\n\n    if (input.length >= 10) {\n      const parsedDate = parseDate(input);\n      const [day, month, year] = input.split(\".\").map(Number);\n\n      if (!isValidDateParts(day, month, year)) {\n        setIsError(true);\n        return;\n      }\n\n      if (parsedDate && isDateWithinRange(parsedDate, minDate, maxDate)) {\n        setIsError(false);\n        onDateSelect?.(parsedDate);\n      } else {\n        setIsError(true);\n      }\n    } else {\n      setIsError(false);\n    }\n  };\n\n  const handleFocus = () => {\n    setIsCalendarOpen(true);\n  };\n\n  const handleClearClick = () => {\n    setIsCalendarOpen(false);\n    setIsError(false);\n    setInputValue(\"\");\n    onDateSelect?.(undefined);\n  };\n\n  return (\n    <PickerContainer ref={ref}>\n      <DateInput\n        value={inputValue}\n        label={label}\n        placeholder={placeholder}\n        onChange={handleInputChange}\n        onFocus={handleFocus}\n        onClear={handleClearClick}\n        isError={isError}\n      />\n      {isCalendarOpen && <CalendarContainer>{children(handleDateSelect)}</CalendarContainer>}\n    </PickerContainer>\n  );\n};\n"],"names":[],"sourceRoot":""}