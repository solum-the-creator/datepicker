{"version":3,"file":"components-date-picker-date-picker-stories.ff41a104.iframe.bundle.js","mappings":";;;;;;;;;;;;AAcA;;;AAGA;;AAIA;;;;;;AAMA;;;;;AAOA;;;;AAMA;;;;;;ACzBA;;ACTA;;ACDA","sources":["webpack://datepicker/./src/components/date-input/date-input.styled.ts","webpack://datepicker/./src/components/date-input/index.tsx","webpack://datepicker/./src/components/hoc/with-picker-logic/with-picker-logic.styled.ts","webpack://datepicker/./src/components/date-picker/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const InputContainer = styled.div<{ $isError?: boolean }>`\n  width: 100%;\n  max-width: 250px;\n  display: flex;\n  align-items: center;\n\n  gap: 0.5rem;\n\n  border: 1px solid;\n  border-radius: 0.5rem;\n  padding: 0.8rem 1rem;\n\n  border-color: ${({ theme, $isError }) => ($isError ? theme.colors.red : theme.colors.border)};\n\n  &:focus-within {\n    border: 1px solid ${({ $isError, theme }) => ($isError ? theme.colors.red : theme.colors.primary)};\n  }\n`;\n\nexport const Input = styled.input<{ $isError?: boolean }>`\n  width: 100%;\n  font-size: 1rem;\n  border: none;\n\n  font-size: 15px;\n  color: ${({ theme }) => theme.colors.secondary};\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const ClearButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const IconContainer = styled.div`\n  width: 1rem;\n  height: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { CalendarIcon } from \"@components/icons/calendar-icon\";\nimport { CloseIcon } from \"@components/icons/close-icon\";\nimport { ThemeWrapper } from \"@components/theme-wrapper\";\nimport { formatDateInputValue } from \"@utils/formatDatesHelpers\";\n\nimport { ClearButton, IconContainer, Input, InputContainer } from \"./date-input.styled\";\n\ntype DateInputProps = {\n  value: string;\n  isError?: boolean;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onFocus?: () => void;\n  onClear?: () => void;\n};\n\nexport const DateInput: React.FC<DateInputProps> = ({ value, isError, onChange, onFocus, onClear }) => {\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formattedValue = formatDateInputValue(e.target.value);\n\n    onChange?.({ ...e, target: { ...e.target, value: formattedValue } });\n  };\n\n  return (\n    <ThemeWrapper>\n      <InputContainer $isError={isError}>\n        <IconContainer>\n          <CalendarIcon />\n        </IconContainer>\n        <Input\n          type=\"text\"\n          placeholder=\"Choose date\"\n          autoComplete=\"off\"\n          onChange={handleInputChange}\n          onFocus={onFocus}\n          value={value}\n        />\n        {value && (\n          <ClearButton onClick={onClear}>\n            <CloseIcon />\n          </ClearButton>\n        )}\n      </InputContainer>\n    </ThemeWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const CalendarContainer = styled.div`\n  position: absolute;\n`;\n\nexport const PickerContainer = styled.div`\n  position: relative;\n`;\n","import { useState } from \"react\";\nimport { Calendar } from \"@components/calendar\";\nimport { withPickerLogic } from \"@components/hoc/with-picker-logic/withPickerLogic\";\nimport { withCalendarLogic } from \"@components/hoc/withCalendarLogic\";\n\nconst CalendarWithLogic = withCalendarLogic(Calendar);\nexport const CalendarWithPickerLogic = withPickerLogic(CalendarWithLogic);\n\ntype BaseCalendarProps = {\n  value?: Date;\n  onSelect?: (value: Date) => void;\n  minDate?: Date;\n  maxDate?: Date;\n  startWeekOnSunday?: boolean;\n  highlightWeekends?: boolean;\n  highlightHolidays?: boolean;\n};\n\nexport const BaseCalendarWithPicker: React.FC<BaseCalendarProps> = () => {\n  const [value, setValue] = useState<Date | undefined>(undefined);\n\n  return (\n    <CalendarWithPickerLogic\n      value={value}\n      onSelect={setValue}\n      startWeekOnSunday={false}\n      highlightHolidays={true}\n      highlightWeekends={true}\n      minDate={new Date(2024, 8, 1)}\n      maxDate={new Date(2024, 10, 20)}\n    />\n  );\n};\n"],"names":[],"sourceRoot":""}